function [squareBW] = Func_PreProcessing(Image)
%CREATEPREPRO 이 함수의 요약 설명 위치

% I_gray = im2gray(Image);
% %% Segment Image
% 
% % Adjust data to span data range.
% X = imadjust(I_gray);
% 
% % Create empty mask.
% BW = false(size(X,1),size(X,2));
% 
% % ROI 그리기
% 
% xPos = [180.3110 180.3110 475.2070 475.2070];
% yPos = [165.1881 218.7231 218.7231 165.1881];
% m = size(BW, 1);
% n = size(BW, 2);
% addedRegion = poly2mask(xPos, yPos, m, n);
% BW = BW | addedRegion;
% 
% % Create masked image.
% maskedImage = X;
% maskedImage(~BW) = 0;
% 
% 
% %% Auto-generated by colorThresholde
% 
% RGB = cat(3, maskedImage, maskedImage, maskedImage);
% 
% % Convert RGB image to chosen color space
% I = rgb2hsv(RGB);
% 
% % Define thresholds for channel 1 based on histogram settings
% channel1Min = 0.000;
% channel1Max = 1.000;
% 
% % Define thresholds for channel 2 based on histogram settings
% channel2Min = 0.000;
% channel2Max = 1.000;
% 
% % Define thresholds for channel 3 based on histogram settings
% channel3Min = 0.708;
% channel3Max = 1.000;
% 
% % Create mask based on chosen histogram thresholds
% sliderBW = (I(:,:,1) >= channel1Min ) & (I(:,:,1) <= channel1Max) & ...
%     (I(:,:,2) >= channel2Min ) & (I(:,:,2) <= channel2Max) & ...
%     (I(:,:,3) >= channel3Min ) & (I(:,:,3) <= channel3Max);
% BW = sliderBW;
% 
% % Initialize output masked image based on input image.
% maskedRGBImage = RGB;
% 
% % Set background pixels where BW is false to zero.
% maskedRGBImage(repmat(~BW,[1 1 3])) = 0;

I_gray = im2gray(Image);

% Adjust data to span data range.
X = imadjust(I_gray);

% Create empty mask.
BW = false(size(X,1),size(X,2));

% ROI 그리기
xPos = [184.7840 184.7840 481.4792 481.4792];
yPos = [167.6481 223.4621 223.4621 167.6481];
m = size(BW, 1);
n = size(BW, 2);
addedRegion = poly2mask(xPos, yPos, m, n);
BW = BW | addedRegion;

% Create masked image.
maskedImage = X;
maskedImage(~BW) = 0;

%%
RGB = cat(3, maskedImage, maskedImage, maskedImage);


% Convert RGB image to chosen color space
I = rgb2hsv(RGB);

% Define thresholds for channel 1 based on histogram settings
channel1Min = 0.000;
channel1Max = 1.000;

% Define thresholds for channel 2 based on histogram settings
channel2Min = 0.000;
channel2Max = 1.000;

% Define thresholds for channel 3 based on histogram settings
channel3Min = 0.662;
channel3Max = 1.000;

% Create mask based on chosen histogram thresholds
sliderBW = (I(:,:,1) >= channel1Min ) & (I(:,:,1) <= channel1Max) & ...
    (I(:,:,2) >= channel2Min ) & (I(:,:,2) <= channel2Max) & ...
    (I(:,:,3) >= channel3Min ) & (I(:,:,3) <= channel3Max);
BW = sliderBW;

% Initialize output masked image based on input image.
maskedRGBImage = RGB;

% Set background pixels where BW is false to zero.
maskedRGBImage(repmat(~BW,[1 1 3])) = 0;

%% 
% I_gray = im2gray(maskedRGBImage);
% BinaryMask = imbinarize(I_gray);
% 
% %%%%%%%%%%%%
% % Make bold text
% Mask_processing = imcomplement(BinaryMask);
% SE1 = strel('line',2,0);
% Mask_processing1 = imerode(Mask_processing,SE1);
% SE2 = strel('line',2,90);
% Mask_processing2 = imerode(Mask_processing1,SE2);
% 
% BinaryMask = imcomplement(Mask_processing2);



% Gray and Binarized Image
I_gray = im2gray(maskedRGBImage);
BinaryMask = imbinarize(I_gray);

%% Additional Pre-processing 

S = [0 0 0 ;1 1 1 ; 0 0 0];
maker1 = imerode(BinaryMask, S);
S = [0 1 0 ;0 1 0 ; 0 1 0];
maker2 = imerode(maker1, S);

Iclean = imreconstruct(maker2, BinaryMask);


se = strel('square',2);
squareBW = imdilate(Iclean, se);

% Real-time Plot
imshow(squareBW)












end